name: Deploy to GKE

on:
  push:
    branches: [ main ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GCP_ZONE: us-central1-a
  GKE_CLUSTER: secure-microservice
  DNS_NAME: microservice.example.com
  GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Check and Create GCS Bucket
      run: |
        if ! gsutil ls -b gs://${{ env.GCS_BUCKET_NAME }} &>/dev/null; then
          echo "Creating GCS bucket for Terraform state..."
          gsutil mb -p ${{ env.GCP_PROJECT_ID }} -l ${{ env.GCP_REGION }} gs://${{ env.GCS_BUCKET_NAME }}
          gsutil versioning set on gs://${{ env.GCS_BUCKET_NAME }}
        else
          echo "GCS bucket already exists."
        fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.GCS_BUCKET_NAME }}" \
          -backend-config="prefix=terraform/state"
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="dns_name=${{ env.DNS_NAME }}"
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="dns_name=${{ env.DNS_NAME }}" -auto-approve
      working-directory: ./terraform

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.10.0

    - name: Deploy Helm Chart
      run: |
        helm upgrade --install microservice ./helm/microservice \
          --set ingress.hosts[0].host=${{ env.DNS_NAME }} \
          --wait \
          --timeout=300s

    - name: Check Helm Release
      run: helm status microservice

    - name: Check Kubernetes Resources
      run: kubectl get deployment,service,ingress -l app=microservice

    - name: Check Pod Health
      run: kubectl get pods -l app=microservice

    - name: Verify Service Accessibility
      run: |
        echo "Waiting for Load Balancer IP..."
        sleep 30
        LB_IP=$(kubectl get ingress microservice-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')


    - name: Cleanup test DNS entry
      if: always()
      run: |-
        # Remove test DNS entry from hosts file
        sudo sed -i "/$DNS_NAME/d" /etc/hosts
